02-24-2021:
    - PJW Fixed dijkstra_map so that the non-tunneling monster's distances save correctly
    - PJW Edited dijkstra_map so that it also works for tunneling monsters so that I didn't have to write two algorithms
    - PJW Edited print_map so that it prints for tunneling and non-tunneling monsters
    - PJW Edited main so that you can load in saved maps, save maps, and print their distance maps.

02-23-2021:
    - PJW Added heap.c, heap.h, and corridor_path_cmp from professor's solutions
    - PJW Started writing dijkstra_map to work for non-tunneling monsters
    - PJW Wrote print_map to print out the distance map
    - PJW Ran into issue where the distances were all 0

02-18-2021:
    - PJW Fixed create_dungeon_map(), save_game(), and load_game() to be able to correctly account for running --save --load or --load --save
    - PJW Fixed arg handling in main function to allow for --save --load or --load --save

02-17-2021:
    - PJW Started to write save game function
    - PJW Wrote save_game() to write data from the dungeon to the disk
    - PJW Made number of up and downstairs into a two element int array and counted them that way so that when passed through functions their values would actually update
    - PJW Ran into bug where everything but the hardness array would write correctly
        - PJW Fixed by changing fwrite(&hardness...) to fwrite(hardness)
    - PJW Added functionality to take in load, save, or just generate parameters from the user and will warn the user if their input is incorrect

02-16-2021:
    - PJW Created types for rooms, player, and up and down staircases
    - PJW Made certain things u_int8_t that could be that type like positions, sizes, and hardness
    - PJW Wrote the load_game() function to load in the binary file
    - PJW Wrote find_room() to check if the x and y positions were located inside of a room
    - PJW Wrote find_stairs() To check if the x and y positions were an up or down staircase
    - PJW Wrote make_dungeon() To create the dungeon from the data in load_game(). Places the character, rooms, corridors, and stairs correctly
    - PJW Ran into bug where anything of hardness 0 was printing as a corridor
        - PJW Fixed this by checking all bounds of the room and not just the original x y position
    - PJW Added load and save functionality to the Makefile

02-15-2021:
    - PJW Created protoypes for load and save functions

02-11-2021:
    - PJW Created headers.h to clean up code
    - PJW Added to create_dungeon_map() to place staircases and start the corridor placing process
    - PJW Wrote shortest_path() to initialize the visited array and to start the corridor placing process
    - PJW Wrote modified_DFS() to perform a modified depth first search to get from the origin room to the next room
        - Performs a depth first search in the left and right direction while performing checks each time the function is called
        - If room is straight up or down, just place corridors

02-10-2021:
    - PJW Wrote fill_dungeon() to fill the char array with *'s to know where non-dungeon places are
    - PJW Wrote part of create_dungeon_map() to correctly place at least 6 rooms that are at least 4x3
    - PJW Wrote print_dungeon() to print dungeon that also includes a border
    - PJW Wrote newRoom() to create a new room struct and return that struct
    - PJW Wrote is_room() to check if rooms would collide
